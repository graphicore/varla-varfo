
/**
 * While this contains the varla-varfo "CSS-framework" it is still
 * intermixed with rules of the original Wikipedia demo/excursion
 * and also more demo-specific rules.
 * FIXME: Organizing and cleaning this up will be a bigger task and I
 * don't want to change too much at a time.
 */


:root{
    /* can't use this per @font-face rule */
    font-synthesis: none;
}
body {
    margin: 0;
    background: inherit;
}

@font-face {
    font-family: 'RobotoFlex';
    src: url('../../fonts/Roboto-Flex/RobotoFlex[slnt,wdth,wght,opsz].ttf') format('truetype');
    font-weight: 100 900;
    -xx-font-style: normal;
    font-style: oblique 0deg -10deg;
}

@font-face {
    font-family: 'AmstelVar';
    src: url('../../fonts/Amstelvar/Amstelvar-Roman[wdth,wght,opsz].ttf') format('truetype');
    font-weight: 100 900;
    font-style: normal;
}

@font-face {
    font-family: 'AmstelVar';
    src: url('../../fonts/Amstelvar/Amstelvar-Italic[wdth,wght,opsz].ttf') format('truetype');
    font-weight: 100 900;
    font-style: italic;
}

h1, h2, h3, h4, h5, h6 {
    margin: 0;
    padding: 0;
}

h2, h3, h4, h5, h6 {
    margin-block-start: calc(1pt * var(--line-height) * var(--document-font-size));
}

/* use :root for custom properties
 * "*" destroys inheritance!
 *
 * We should set all necessary font-styles per element that defines
 * font-styles.
 * */
:root {
/* beginnings of the CSS framework */

/* I think the plan is to set high level variables, and depending
 * on the font **generate** css that uses them the best way.
 * So, a font/font-family can have  capabilities, we detect them, and
 * according to that, wire up these variables.
 */

/*
 * Uh, another thing is that not all of the standard properties below
 * do inherit. so we need to specify them explicitly for some elements!
 * e.g. columns, column-width, column-count (but column-width is more or less
 * useless when column count is 1 anyways.)
 * width
 */


/* page/portal info */
/*--column-width: 32.5; /* in em */
/*--column-count: 1; /* maybe use actual container width to determine this? */


/* --font choice/variation settings*/
--font-family: AmstelVar;
--grad-animation-name: AmstelVar-grad-by-font-size;

--font-style: normal; /* oblique is basically broken */
--font-slant: 0;
--font-weight: 400; /* depending on font/font-family this can go anywhere */
--font-grade: 0;
/* FIXME: get default --font-xtra (XTRA) value by font-size and font-family
 *
 * used to be 520 but making it narrow to work out justification */
/* interestingly, vabro.js suggests to sart at 375 and to max out at 402
 * was 440 and I thought it was tight.
 *
 *
 */
--font-xtra: 562;/* by (xtra, wdth) */

--font-width: 100; /* this goes into wdth */



--fine-user-zoom: 0;

/* 25 cm change size by 1 pt */
--font-size-change-by-distance: calc(var(--user-distance-cm, 0) / 25);


/* in pt! We need JS to get the document default font-size in pt,
 * because we can't yet calculate it
 * https://github.com/w3c/csswg-drafts/issues/6149
 */
 /* Must be invalid initially or it will influence the javascript-determined value.*/
--default-browser-font-size: "invalid";
 /* This is essentially the rem: Font size of the root element.
  *
  * plain:
  *     --document-font-size: var(--default-browser-font-size);
  * Can be used as an indirection as well, modifying the browser default.
  * e.g. to match wikipedia:
  *     --document-font-size: calc(0.875 * var(--default-browser-font-size));
  */

--document-font-size: calc((1 * var(--default-browser-font-size))
        + var(--fine-user-zoom, 0)
        + var(--font-size-change-by-distance, 0))
        ;



/* FIXME: depending on line-length these should change
 * with runion-01 we have always shorter lines, hence these are not of use
 * anymore:
 *       --line-height: 1.5;
 *       --letter-space: 0.1;
 *       --word-space: 0.1;/*in fractions of em
 * HOWEVER, in a long-line situation, the tool should do something like
 * the above, and also the below is likely too static.
 */
--line-height: 1.3;
--letter-space: 0;
--word-space: 0;/*in fractions of em*/


}

/** columns **/

* {
/*column-width: calc(1pt * var(--font-size) * var(--column-width));
/*column-count: var(--column-count);*/
/*width: calc(1em * var(--column-width));*/
font-family: var(--font-family);
font-style: var(--font-style);
font-size: calc(1pt * var(--font-size));
letter-spacing: calc(1pt * var(--letter-space));
line-height: var(--line-height);



--font-size: calc(var(--font-size-rem, 1) * var(--document-font-size)); /* --opsz */
/* if --font-opsz-rem is not set, the rule in font-variation-settings
 * defaults to --font-size, so don't set a generic --font-opsz-rem, and
 * only use it if is supposed to be different from --font-size-rem;
 */
--font-opsz: calc(var(--font-opsz-rem) * var(--document-font-size));

--x-font-grade: calc(var(--font-grade, 0) * var(--amplify-grade, 1) * var(--toggle-grade, 1));

--x-font-weight: calc(var(--font-weight) + var(--font-weight-change, 0));

font-weight: var(--x-font-weight);

/* About "VVFS": (Varla-Varfo Font Size) is only debugging information,
 * the actual calculated value can be observed in the javascript debuggers
 * "computed styles" menu, so we know the finally applied font size in PT.
 * Since "VVFS" is not an axis name, it has no effect on the font display.
 */
font-variation-settings:
            "slnt" var(--font-slant),
            "wght" var(--x-font-weight),
            "GRAD" var(--x-font-grade),
            "XTRA" var(--font-xtra),
            "opsz" var(--font-opsz, var(--font-size)),
            "wdth" var(--font-width),
            "VVFS" var(--font-size)
            ;
/* This is not required for the variable fonts, as font-variation-settings
 * will win, however, it helps with the type-ramp bookmarklet to
 * eliminate false doubles and it does not do any harm.
 */
font-weight: var(--x-font-weight);

}


/* All about line raster/grid consistency across columns. */
/* no longer for p, ul, as we use text-indent and ul has it's own indent style.*/

table,
.thumb,
ul, ol.not(:first-child),
.templatequote{
    /* likely not what we're going to use, but it aligns with the line height. */
    margin-block-start: calc(1pt * var(--font-size) * var(--line-height));
}
.runion-01 .hatnote,
table,
.thumb,
ul, ol,
.templatequote {
    margin-block-end: calc(1pt * var(--font-size) * var(--line-height));
}

p, ul ul{
    margin-block: 0;
}

h2 + p,
h3 + p {
    margin-block-start: 0;
}

table{
    border-spacing: 0;
}

b, strong {
  --font-weight: 700;
}

/* LIGHT/DARK MODE CHOLOR-SCHEME */

:root {
    /* Only in dark mode, but it depends on font-size and weight
     * where font-size selects 2 optically chosen grade adjustments
     * for weights between 400 and 700 and those must be interpolated
     * by the actual weight value.
     *
     * The values by font size could also be interpolated, but since
     * they are 1pt apart, they could also be chosen by to integer
     * rounded font-size, between 10 and 18.
     *
     * Also, doing a grep on this document, we only use --font-weight 400, 600, 700
     * so, in our case interpolating is not necessary and just looking up
     * values by font-size would suffice. Note though, that looking up values
     * is the hard part.
     *
     * Maybe a lookup table could be created using @keyframes>???
     * one dimension is chosen by the animation name
     * one dimension is chosen by the animation position
     * since the font-size is has optically/arbitrary selected values,
     * it should probably be the animation name, BUT, for it's the less
     * controlled value, it may better be the position! ....
     *
     * maybe the custom properties set by the keyframes do not interpolate
     * but with enough keyframes, it could be good enough!
     */

    --light-link-color: #0645ad;
    --light-layout-border-color: #a7d7f9;

    --light-background: #fff;
    --light-color: #000;

    --light-mode-invert: 0;
    --dark-mode-invert: 1;

    --dark-link-color: #6f5608;
    --dark-layout-border-color: #a06b27;



    /* default */
    --background: var(--light-background);
    --color: var(--light-color);
    --mode-invert: var(--light-mode-invert);
}

/* At least for debugging, these help immensely as the properties show
 * up calc()-ulated! in the developer tools of Chromium under computed
 * values! But foremost, @properties make the animations interpolate.
 */

@property --grad-400 {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --grad-700 {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

/* For testing in the Javasscript fallback.*/
@property --grad-supported {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

@property --grad-animation-progression {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --font-grade {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

/* Works together with the @properties nicely in Chromium, but Firefox
 * support is not soon to expect. A solution seems to be to set
 * --grad-400 and --grad-700 by hand/directly in CSS, whenever --font-size,
 * --font-family, or --font-weight is set, but it wouldn't take into
 * account the final absolute --font-size, which makes it rather unusable.
 * So probably JavaScript has to walk through all elements and set those
 * --grad-X00 variables where one of the three input variables changes
 * compared to  the parent.
 * I keep this though, because it's impressive what can be done with the
 * new CSS stuff and it's a good actual working example. Javascript will
 * be a fallback, need to feature detect.
 */
@keyframes RobotoFlex-grad-by-font-size {
    /* From 10 to 18 and a step size of 1 we have 8 steps: 12.5 % each.*/
    0% { /* 10 pt*/
      --grad-supported: 1;
      --grad-400: 0;
      --grad-700: 0;
    }
    12.5% { /* 11 pt*/
      --grad-400: -6;
      --grad-700: -6;
    }
    25% { /* 12 pt*/
      --grad-400: -9;
      --grad-700: -10;
    }
    37.5% { /* 13 pt*/
      --grad-400: -12;
      --grad-700: -15;
    }
    50% { /* 14 pt*/
      --grad-400: -14;
      --grad-700: -20;
    }
    62.5% { /* 15 pt*/
      --grad-400: -16;
      --grad-700: -30;
    }
    75% { /* 16 pt*/
      --grad-400: -18;
      --grad-700: -38;
    }
    87.5% { /* 17 pt*/
      --grad-400: -22;
      --grad-700: -43;
    }
    100% { /*18 ot */
      --grad-supported: 1;
      --grad-400: -24;
      --grad-700: -54;
    }
}
@keyframes AmstelVar-grad-by-font-size {
    /* From 10 to 18 and a step size of 1 we have 8 steps: 12.5 % each.*/
    0% { /* 10 pt*/
      --grad-supported: 1;
      --grad-400: -3;
      --grad-700: -80;
    }
    12.5% { /* 11 pt*/
      --grad-400: -6;
      --grad-700: -90;
    }
    25% { /* 12 pt*/
      --grad-400: -10;
      --grad-700: -95;
    }
    37.5% { /* 13 pt*/
      --grad-400: -12;
      --grad-700: -100;
    }
    50% { /* 14 pt*/
      --grad-400: -14;
      --grad-700: -105;
    }
    62.5% { /* 15 pt*/
      --grad-400: -16;
      --grad-700: -110;
    }
    75% { /* 16 pt*/
      --grad-400: -18;
      --grad-700: -115;
    }
    87.5% { /* 17 pt*/
      --grad-400: -22;
      --grad-700: -120;
    }
    100% { /*18 ot */
      --grad-supported: 1;
      --grad-400: -24;
      --grad-700: -125;
    }
}

/* This is a placeholder to switch on/off existing animation
 * using custom properties in animation-name.
 */
@keyframes no-animation {}

/* Font-Grade/GRAD setting
 *
 * Use this to turn all of this on, see dark-mode settings:
 *          --grad-active-animation: var(--grad-animation-name);
 *
 * It's a pity we can't synthesize the animation name, as in `content` e.g.:
 *      animation-name: var(--font-family) "-grad-by-font-size";
 *      OR
 *      --grad-animation-name: var(--font-family) "-grad-by-font-size";
 * Which is a bummer, because it basically means we must set
 * animation-name next to --font-family everywhere.
 */
* {
    /* (undefined) will tell us in the fallback javascript that
     * the @keyframes are not supported.
     *     --grad-400: (undefined);
     *     --grad-700: (undefined);
     * NOTE: can't use this as in Firefox, without @property, it breaks
     * all of the font-variation-settings. Instead we'll just check:
     * if(getComputedStyle(elem).getPropertyValue('--grad-400') === '') ...;
     */

    animation-play-state: paused;
    animation-fill-mode: both;
    animation-timing-function: linear;
    /* depends on font-size:
     *      10 and lower than = 0
     *      18 and greater than = 1
     */
    --grad-min-font-size: 10;
    --grad-max-font-size: 18;
    --grad-actual-font-size: clamp(
            var(--grad-min-font-size),
            var(--font-size),
            var(--grad-max-font-size)
            );
    --grad-animation-progression: calc(
              (var(--grad-actual-font-size) - var(--grad-min-font-size))
            / (var(--grad-max-font-size) - var(--grad-min-font-size))
            );
    animation-duration: 1s;
    animation-delay: calc(-1s * var(--grad-animation-progression));
    animation-name: var(--grad-active-animation);
    /* --font-grade:
     * Must be only applied in dark mode!
     * There's no other grade changing rule, however, this property
     * is already set so that it only switches on in dark mode
     */
    --font-grade: calc(
              (var(--grad-700, 0) - var(--grad-400, 0))
            * ( (clamp(400, var(--x-font-weight), 700) - 400) / (700 - 400))
            + var(--grad-400, 0)
            );
}


@media (prefers-color-scheme: dark) {
    :root{
        /* This is actually the inverted color of what we really want:
         * a nice light sky blue (according to the color-picker: #7b91d4)
         * */
        --link-color: var(--dark-link-color);
        --layout-border-color: var(--dark-layout-border-color);
        --mode-invert: var(--dark-mode-invert);
    }
    * {
        --grad-active-animation: var(--grad-animation-name);
    }
    .user_preferences-color_scheme-default:after{
        content: " (dark)";
    }
}
:root.explicit-dark-mode{
    --link-color: var(--dark-link-color);
    --layout-border-color: var(--dark-layout-border-color);
    --mode-invert: var(--dark-mode-invert);
}
.explicit-dark-mode * {
    --grad-active-animation: var(--grad-animation-name);
}

@media (prefers-color-scheme: light){
    :root{
        --background: var(--light-background);
        --color: var(--light-color);
        --mode-invert: var(--light-mode-invert);
        --link-color: var( --light-link-color);
        --layout-border-color: var(--light-layout-border-color);
    }
    * {
        --grad-active-animation: no-animation;
    }
    .user_preferences-color_scheme-default:after{
        content: " (light)";
    }
}

:root.explicit-light-mode {
    --background: var(--light-background);
    --color: var(--light-color);
    --mode-invert: var(--light-mode-invert);
    --link-color: var( --light-link-color);
    --layout-border-color: var(--light-layout-border-color);
}

.explicit-light-mode * {
    --grad-active-animation: no-animation;
}


:root{
    background: var(--background);
    color: var(--color);
    filter: invert(var(--mode-invert, 0))
}
img {
    /* Invert back; this is quite elegant! */
    filter: invert(var(--mode-invert, 0))
}

/* Attempts to use the framework to reproduce the original font-settings. */
#mw-head,
#mw-panel {
    --font-family: RobotoFlex;
    --grad-animation-name: RobotoFlex-grad-by-font-size;
    --font-xtra: 468; /*FIXME: consider full spec, including esp. --font-size (pt)*/
}
.vector-menu-portal .body li, .vector-menu-portal .vector-menu-content li {
    --font-size-rem: 3/4;
    --line-height: 1.125;
    word-wrap: break-word;
}

h1, h2, h3, h4 {
    --font-family: RobotoFlex;
    --grad-animation-name: RobotoFlex-grad-by-font-size;
    --font-xtra: 468; /*FIXME: consider full spec, including esp. --font-size (pt)*/
}

h1 { /* headline */
    /*
     * Requested is to calculate opsz, size etc relative to the
     * body/document text size, as in REM units, but we don't use rem
     * as they have limitations getting the actual numerical font-size
     * in pt from them, so rem are unusable in e.g. font-variation-settings
     * or other calculations.
     */
    --font-size-rem: 5;
    --font-opsz-rem: 7;

    --font-weight: 650;
    --font-width: 85;
    --line-height: 1.02;
    hyphens: none;
}

#siteSub {
    /* This functions as the "subhead", but it seems to be:
     * "From Wikipedia, the free encyclopedia" in every case!
     */
    --font-family: AmstelVar;
    --grad-animation-name: AmstelVar-grad-by-font-size;
    --font-size-rem: 3/2;
    --font-weight: 400;
}

h2 { /* subsection headline */
    --font-size-rem: 7/3;
    --font-weight: 600;
}
h3 { /* sub-subsection headline */
    --font-size-rem: 7/3;
    --font-weight: 500;
}
h4 { /* h4 is not used in the Typography article, but in other Wikipedia. */
    --font-size-rem: 7/3;
    --font-weight: 400;
}

.templatequote {
    --font-family: RobotoFlex;
    --grad-animation-name: RobotoFlex-grad-by-font-size;
    --font-xtra: 468; /*FIXME: consider full spec, including esp. --font-size (pt)*/
    --font-size-rem: 2;
    --font-weight: 100;
}

.vector-menu-portal h3 {
    --font-size-rem: 3/4;
    --font-weight: 500;
}

.mw-editsection, .mw-editsection-like {
    --font-size-rem: 13/16;
    --font-weight: 400;
    --line-height: 1;
}

@property --sup-scale {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
/* get font size and
 *
 * * .57 scale size for 14 pt
 * for 8 pt = .65,
 * for 144 pt. .25
 */
@keyframes synth-sub-and-super-script {
    0% { /* 8pt */
        --sup-scale: .65
    }
    4.41% { /*   14pt  (14-8)/(144-8) * 100  */
        --sup-scale: .57;
    }
    100% { /* 144pt */
        --sup-scale: .25;
    }
}

sup, sub{
    /* this redefines --font-size, with our scaling factor that way,
     * it goes directly into OPSZ etc., without us changing the definitions
     */
    --no-animation: no-animation;
    animation-name: synth-sub-and-super-script, var(--grad-active-animation);
    animation-play-state: paused, paused;
    animation-fill-mode: both, both;
    animation-timing-function: linear, linear;
    /* depends on font-size:
     *      10 and lower than = 0
     *      18 and greater than = 1
     */
    --sup-min-base-font-size: 8;
    --sup-max-base-font-size: 144;
    --sup-actual-base-font-size: clamp(
            var(--sup-min-base-font-size),
            var(--xo-font-size),
            var(--sup-max-base-font-size)
            );
    --sup-animation-progression: calc(
              (var(--sup-actual-base-font-size) - var(--sup-min-base-font-size))
            / (var(--sup-max-base-font-size) - var(--sup-min-base-font-size))
            );
    animation-duration: 1s, 1s;
    animation-delay: calc(-1s * var(--sup-animation-progression)),
                     calc(-1s * var(--grad-animation-progression));

    --font-size: calc(var(--sup-scale) * var(--font-size-rem, 1) * var(--document-font-size));


    /* If there’s a width axis, increase it to 110%,
     * or * 1.1 if wdth is a non-standard value.
     *          FIXME: In which case would it be a non-standard value?
     *          FIXME: In here, we use rather XTRA for width, is it that?
     */
    --font-width: 110; /* The registered axis default is 100 */

    /* If there’s a wght axis, increase it by 50,
     * or * 1.125 if wght is a non-standard value
     *          FIXME: In which case would it be a non-standard value?
     */
    --font-weight-change: calc(var(--font-weight) * 0.125);
}

sup *, sub *{
    font-size: inherit;
    --font-size: inherit;
}

sup, sup * {
    /*baseline shift = cap ht * .57 - cap ht
     *      FIXME: since I can't access cap-height directly I go with
     *             standard vertical-align: top, which doesn't interfere
     *             with the line-height as well, e.g. the value "super"
     *             does!
     */
    vertical-align: top;
}
sub, sub * {
    /* Else footnote inferiors
     * baseline shift = cap ht / 6
     *      FIXME: same considerations as above with <sup> + baseline shift
     */
    vertical-align: bottom;
}


#p-personal li {
    --font-size-rem: 3/4;
}

b, strong {
    --font-weight: 600;
}

i, cite, em, var, dfn {
    --font-style: italic;
}

.hatnote {
    --font-style: italic;
}
.mw-body h1, .mw-body-content h1, .mw-body-content h2 {
    /* Positioning the headline underline (border-bottom) closely to the box.
     * Too this from original markup, I'm not sure this is the best way.*/
    --line-height:1.3;
}


.runion-01 {
    /*
    --column-count: columns;
    --column-width-en: lineLengthEn;
    --column-gap-en: columnGapEn;
    --padding-left-en: paddingLeftEn;
    --padding-right-en: paddingRightEn;
    */

    columns: calc(.5em * var(--column-width-en, 0)) var(--column-count, 1);
    padding-left: calc(.5em * var(--padding-left-en, 0));
    padding-right: calc(.5em * var(--padding-right-en, 0));
    column-gap: calc(.5em * var(--column-gap-en, 0));

    /* FIXME/TODO: what about H&J, especially in Chrome and Safari?
     * ALSO: how to detect and change the setup when hyphens are not available?
     *
     * As of now confirmed working with the current testing page as it is,
     * in English:
     *      Firefox for openSuse - Tumbleweed Version 86.0.1 (64-bit)
     *      Chromium Version 89.0.4389.90 (openSUSE Build) (64-bit)
     *
     * https://css-tricks.com/almanac/properties/h/hyphenate/
     *
     * There are it seem related properties to configure hyphenation
     * hyphenate-limit-last, hyphenate-limit-zone etc.
     * Safari 5+ requires -webkit-, Firefox 6+ requires -moz-, IE 10+ requires -ms-, iOS 4.2+ requires -webkit-.
     */
    word-wrap: break-word;
    overflow-wrap: break-word;
    -webkit-hyphens: auto;
      -moz-hyphens: auto;
      -ms-hyphens: auto;
           hyphens: auto;

    text-align: left;
    /* FIXME: should vary with line-length etc. */
    text-indent: 2em;
    /* text-align: justify;
     * We're doing the justification ourselves, initially, left-aligned
     * is required, because we can use it to measure the empty space that
     * is left on the line.
     */
    /*text-justify: inter-word;   auto is OK so far as well*/

    /* Firefox does not support these! */
    orphans: 3;
    widows: 3;
}

/* no text-indent*/

.runion-01 .hatnote,
.runion-01 ul,
.runion-01 ol,
.runion-01 h1,
.runion-01 h2,
.runion-01 h3{
    text-indent: 0;
}

/* FIXME .hatnote may have margin-block, but should
 * not indent, it's already italic anyways.
 * */

.runion-01 .hatnote{
    padding-inline-start: 0;
    /* because it's usually really short */
    hyphens: none;
}


.runion-01.justification-context-block,
.runion-01 .justification-context-block {
    position: absolute;
    /* with top and left set, there's no need to determine the default */
    top: auto;
    left: auto;
    visibility: hidden;
    column-span: all;/* Take out of column layout. */
    padding: 0;
    width: calc(0.5em * var(--column-width-en));


    visibility: visible;
    background: white;
    outline: 2px solid lime;

}

.runion-01 {
    /*
     * This would be  a non-issue if percentages in the CSS
     * word-spacing property were supported! (They are only in Firefox.)
     */
    --word-space-size: (undefined); /* a length unit */
    /* This describes only the change, 0 being no change 1 doubles ws. */
    --word-space: 0; /* multiplier with --word-space-size */
}

.runion-01 .runion-line,
.justification-context-block * {
    /* word-spacing, when using a <length>:
     *          Specifies extra spacing in addition to the intrinsic
     *          inter-word spacing defined by the font.
     */
    word-spacing: calc(var(--word-space-size) * var(--word-space));

     --word-space: clamp(
            var(--justification-wordspace-min),
            calc( var(--justification-wordspace-default) + var(--justification-step) * var(--justification-step-wordspace)),
            var(--justification-wordspace-max)
        );
    --letter-space: clamp(
            var(--justification-tracking-min),
            calc( var(--justification-tracking-default) + var(--justification-step) * var(--justification-step-tracking)),
            var(--justification-tracking-max)
        );
    --font-xtra: clamp(
            var(--justification-xtra-min),
            calc( var(--justification-xtra-default) + var(--justification-step) * var(--justification-step-xtra)),
            var(--justification-xtra-max)
        );
}

.runion-01 .runion-justified-block {
    white-space: nowrap;
}

.skip-justify {
    white-space: normal;
}

/* FIXME: Apply the class .fix-short-section automatically, it's
 * currently set manually on the <p> of the sub-section "Etymology".
 */
.runion-01 .fix-short-section {
    column-span: all;
    width: calc(.5em * var(--column-width-en, 0));
}

/* these are sectioning elements */
.runion-01 h1,
.runion-01 h2,
.runion-01 h3 {
    column-span: all;
}


/* Control line-wrapping.
 *
 * Chrome cannot do it's hyphenation between two spans, so after
 * wrapping the text-nodes into the .runion-line spans, line breaking
 * changes.
 * Firefox keeps the same layout without any trouble, but, since we plan
 * to change the font-spec for each line to fit better, this must be a
 * bomb-proof way to ensure each line stays where it is.
 */
.runion-line {
    /* This is forcing the browser.*/
    white-space: nowrap;
    /* This is the cool when we toggle the color-coded-lines class*/
    transition: background 3s;
}


.color-coded-lines .runion-line{
    /* with small line-heights and color coded line backgrounds, we
     * tend to clip descenders. Must be removed when no line color coding
     * is desired, especially Chromium has little rendering errors in
     * column layout here.
     */
    background: var(--line-color-code, PaleGreen);
    transition: background .5s;
    mix-blend-mode: darken;
}

/**
 * Introduce explicit wrapping before each line
 * This normalizes the behavior of Chrome and Firefox, both loose
 * their hyphenation with the first line ::before display: block rule
 * now, we need to mark elements in JS explicitly that require hyphens!.
 *
 * Must be unset for first lines to keep text-indent
*/
.runion-line.r00-l-first::before{
    content: '';
    display: block;
}

/*
 * THIS actually helps to prevent the "missing textNode mystery" in Chrome/Chromium:
 * it's there but it's not there...
 * Incidentally: this does not by itself fix the rendering issue, it looks
 * like this plus the adding and removal of the "new-style-current-last-line-elem"
 * does it. It is not enough to leave this rule empty or to not have the
 * rule at all, just adding the class. It's an browser internal cache
 * invalidtion issue from the feel of it.
 */
.justification-context-block .new-style-current-last-line-elem::after {
    content: '';
}

/* Making this an exclusive Firefox block, as it interferes with Safari
 * (which has the actually worse bug) and is not relevant for Chrome.
 * The way it interferes is that Safari applies the text-indent to all
 * of these lines with pseudo elements that have "display: block" and
 * hence, all but the actually indented lines become too short in
 * findLines/.justification-context-block.
 */
@-moz-document url-prefix() {
    /* This "display: block" is not required for the "missing textNode mystery".
     * Instead, it fixes an issue with Firefox, where a line does not break
     * when it is the current last line and suddenly for some reason (maybe
     * enough space plus our special markup) can get another word/syllable/piece
     * from the next line. Subsequently the assertion in _findAndJustifyLineByNarrowing
     * fails: that the content of firstLine with .range.toString()) is the
     * same as the content of the re-packed and re-detected startLine.
     * StarLine will have the content of the word/syllable/piece that
     * got moved up to the last line.
     */
    .justification-context-block .new-style-current-last-line-elem::after {
        display: block;
    }

    /* Prevent Firefox from creating arbitrary breaks while justifying.
     * This also breaks the hyphens of hyphenated lines, creating new lines
     * just for the hyphens, but in the phase of finding and narrowing lines
     * that is not essential.
     */
    .justification-context-block .line-in-progress-first-elem::before,
    .justification-context-block .r00-l-first::before {
        content: '';
        display: block;
    }

}

.justification-context-block .r00-first-line.line-in-progress-first-elem::before,
.runion-line.r00-first-line.r00-l-first::before {
    content: unset;
    display: unset;
}

/*
 * This fixes line wrapping, not changing in Chrome (nor Firefox). This
 * has the advantage, that the last-line in a paragraph is aligned left
 * and the other lines are justified by word-space, exactly what we are
 * looking for.
 * The heuristic that the adds the hyphen class may still have flaws!
 */

/* Prevent Safari from displaying hyphens where there should be none.*/
.r00-l-last::after{
    content: '';
}
.runion-line.r00-l-hyphen::after {
    content: '-'; /* I tried using soft hyphen &shy; '\00AD' but it
                     doesn't do anything*/
}

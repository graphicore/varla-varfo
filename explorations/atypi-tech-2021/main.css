:root{
    /* can't use this per @font-face rule */
    font-synthesis: none;
    --fine-user-zoom: 0;

    --link-color: #0645ad;
    --layout-border-color: #a7d7f9;
}
body {
    font-size: calc(100% + 1pt * var(--fine-user-zoom, 0));
}

@font-face {
    font-family: 'RobotoFlex';
    src: url('./fonts/Roboto-Flex/RobotoFlex[slnt,wdth,wght,opsz].ttf') format('truetype');
    font-weight: 100 900;
    -xx-font-style: normal;
    font-style: oblique 0deg -10deg;
}

@font-face {
    font-family: 'AmstelVar';
    src: url('./fonts/Amstelvar/Amstelvar-Roman[wdth,wght,opsz].ttf') format('truetype');
    font-weight: 100 900;
    font-style: normal;
}

@font-face {
    font-family: 'AmstelVar';
    src: url('./fonts/Amstelvar/Amstelvar-Italic[wdth,wght,opsz].ttf') format('truetype');
    font-weight: 100 900;
    font-style: italic;
}


/* essential layout rules copied from original wikipedia css*/
body {
    margin: 0;
    background-color: #f6f6f6;
}


div.thumb {
    width: auto;
    background-color: transparent;
}

/*
div.tright, div.floatright, table.floatright {
    clear: right;
    float: right;
}
div.tleft, div.floatleft, table.floatleft {
    float: left;
    clear: left;
}

div.tright {
    margin: 0.5em 0 1.3em 0;
}
div.tleft {
    margin: 0.5em 0 1.3em 0;
}
*/
div.thumbinner {
    /* FIXME: With this border and padding, the element is not neutral
     * to the base line grid, however, we don't control the size of
     * the content either in that respect, so being conscious here would
     * not *yet* resolve the problem.


    padding: 0.1875em;
    */
    /* text-align: center; */
    border: 0.0625em solid #c8ccd1;
    overflow: hidden;
    display: block;
}

div.thumbinner > * {
    background-color: #f1f2f3;
    padding: 0.1875em;
}

div.thumbinner a.image{
    display: block
}

.thumbinner {
    min-width: 100px;
}

.thumbinner img.thumbimage {
    display: block;
    margin: auto;
}

.thumbcaption {
    border: 0;
    padding: 3px;
    text-align: left;
}



html body.mediawiki .mbox-small {
    clear: right;
    /*float: right;*/
    margin: 4px 0 4px 1em;
    box-sizing: border-box;
    width: auto/*238px;*/
    font-size: 88%;
    line-height: 1.25em;
}


/* navigation */
#mw-navigation h2 {
    position: absolute;
    top: -9999px;
}
#mw-head {
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
}
#mw-panel {
    padding-left: 0.5em;
    font-size: inherit;
    position: absolute;
    top: 0;
    width: 10em;
    left: 0;
}

#p-logo {
    width: 10em;
    height: 160px;
    margin-bottom: 1em;
}

/* keep body out of the way of navigation */
.mw-body {
    padding: 1.25em 1.5em 1.5em 1.5em;
}

.mw-body {
    margin-top: -1px;
    border: 1px solid var(--layout-border-color);
    border-right-width: 1px;
    border-right-width: 0;
    background-color: var(--background);
}
.mw-body, #mw-data-after-content {
    margin-left: 10em;
}
.mw-body, .parsoid-body {
    direction: ltr;
    padding: 1em;
}

.emptyPortlet {
    display: none;
}

.mw-portlet h3 {
    display: none;
}

#right-navigation {
    float: right;
    margin-top: 2.5em;
}

.vector-menu-tabs, .vector-menu-tabs a, #mw-head .vector-menu-dropdown h3 {
    background-image: url(/w/skins/Vector/resources/skins.vector.styles/images/tab-separator.png?09d4b);
    background-image: linear-gradient(to bottom,rgba(167,215,249,0) 0,var(--layout-border-color) 100%);
    background-repeat: no-repeat;
    background-size: 1px 100%;
}
.vector-menu-tabs {
    background-position: left bottom;
    float: left;
    height: 2.5em;
    padding-left: 1px;
}

vector-menu-tabs h3 {
    display: none;
}

#p-personal {
    right: 1em;
    position: absolute;
    top: 6px;
    z-index: 100;
}

#mw-head-base {
    margin-top: -5em;
    height: 5em;
}

#mw-page-base {
    background-color: #fbfbfb;
    background-image: -webkit-gradient(linear,right top,right bottom,color-stop(50%,#ffffff),color-stop(100%,#f6f6f6));
    background-image: -webkit-linear-gradient(top,#ffffff 50%,#f6f6f6 100%);
    background-image: -moz-linear-gradient(top,#ffffff 50%,#f6f6f6 100%);
    background-image: linear-gradient(to bottom,#ffffff 50%,#f6f6f6 100%);
    background-position: bottom left;
    height: 5em;
}

#p-logo a {
    background-position: center center;
    background-repeat: no-repeat;
    display: block;
    width: 10em;
    height: 160px;
    text-decoration: none;
}
.mw-wiki-logo {
    background-image: url(./static/images/enwiki-2x.png);
    background-size: 135px auto;
}

.vector-menu-portal .body ul, .vector-menu-portal .vector-menu-content ul {
    list-style: none none;
    margin: 0;
    padding-top: 0.3em;
}

.vector-menu-portal {
    margin: 0 0.6em 0 1.3em;
    padding: 0.25em 0;
    direction: ltr;
}

.vector-menu-tabs ul {
    float: left;
    height: 100%;
    list-style: none none;
    margin: 0;
    padding: 0;
}

#p-personal .vector-menu-content-list {
    display: flex;
    flex-wrap: wrap;
    flex-grow: 1;
    justify-content: flex-end;
    align-items: baseline;
}
#p-personal ul {
    padding-left: 10em;
}
.mw-portlet ul {
    list-style: none none;
    margin: 0;
}
ul, ol {
    margin: 0 0 0 1em;
    padding: 0;
    padding-left: 0px;
}

#toc ul{
    list-style: none;
}

a {
    text-decoration: none;
    color: var(--link-color);
    background: none;
}

#p-personal li {
    float: left;
}
#pt-anonuserpage {
    color: #54595d;
}
#pt-anonuserpage, #pt-userpage a {
    background-image: url(./w/skins/Vector/resources/skins.vector.styles/images/user-avatar.svg?b7f58);
    background-position: left 0.33333333em;
    background-repeat: no-repeat;
    background-size: 1.16666667em 1.16666667em;
    padding-top: 0.5em !important;
    padding-left: 16px !important;
}

.mw-portlet li {
    margin-left: 0.75em;
    padding-top: 0.5em;
    line-height: 1.16666667;
}


.vector-menu-portal .body li, .vector-menu-portal .vector-menu-content li {
    margin: 0;
    padding: 0.25em 0;
    word-wrap: break-word;
}

#left-navigation {
    float: left;
    margin-left: 10em;
    margin-top: 2.5em;
    margin-bottom: -2.5em;
}

.mw-body, #mw-head-base, #left-navigation, #mw-data-after-content, .mw-footer {
    margin-left: 11em;
}

.vector-menu-tabs, .vector-menu-tabs a, #mw-head .vector-menu-dropdown h3 {
    background-image: url(/w/skins/Vector/resources/skins.vector.styles/images/tab-separator.png?09d4b);
    background-image: linear-gradient(to bottom,rgba(167,215,249,0) 0,var(--layout-border-color) 100%);
    background-repeat: no-repeat;
    background-size: 1px 100%;
}
.vector-menu-tabs {
    background-position: left bottom;
    float: left;
    height: 2.5em;
    padding-left: 1px;
}

.vector-menu-tabs .selected {
    background: #ffffff;
}

.vector-menu-tabs li {
    background-image: url(/w/skins/Vector/resources/skins.vector.styles/images/tab-normal-fade.png?1cc52);
    background-image: linear-gradient(to top,var(--layout-border-color) 0,#e8f2f8 1px,#ffffff 100%);
    background-position: left bottom;
    background-repeat: repeat-x;
    float: left;
    display: block;
    height: 100%;
    margin: 0;
    padding: 0;
    line-height: 1.125em;
    white-space: nowrap;
}

.vector-menu-tabs .selected a, .vector-menu-tabs .selected a:visited {
    color: #202122;
    text-decoration: none;
}
.vector-menu-tabs li a {
    background-position: right bottom;
    color: var(--link-color);
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: block;
    float: left;
    height: 3.07692308em;
    position: relative;
    padding-top: 1.25em;
    padding-left: 8px;
    padding-right: 8px;
    /** font-size: 0.8125em; was 13px so 1em was 16px == 12 pt!
     * but for now I stick to absolute font-sizes:
     * 13px * 3/4 = 9.75pt
     */
    --font-size: 9.75;
    cursor: pointer;
}

#p-search {
    float: left;
    margin-right: 1em;
    margin-left: 0.5em;
}

#p-search h3 {
    display: block;
    position: absolute !important;
    clip: rect(1px,1px,1px,1px);
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    overflow: hidden;
}

#p-search form {
    margin: 0.5em 0 0;
}

#simpleSearch {
    position: relative;
    height: 100%;
}
#simpleSearch {
    min-width: 5em;
    width: 13.2em;
    width: 20vw;
    max-width: 20em;
}

#searchInput {
    background-color: rgba(255,255,255,0.5);
    color: #000000;
    width: 100%;
    height: 2.15384615em;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    border: 1px solid #a2a9b1;
    border-radius: 2px;
    padding: 5px 2.15384615em 5px 0.4em;
    -webkit-box-shadow: inset 0 0 0 1px transparent;
    box-shadow: inset 0 0 0 1px transparent;
    font-family: inherit;
    /** font-size: 0.8125em; was 13px so 1em was 16px == 12 pt!
     * but for now I stick to absolute font-sizes:
     * 13px * 3/4 = 9.75pt
     */
    --font-size: 9.75;
    direction: ltr;
    -webkit-transition: border-color 250ms,box-shadow 250ms;
    -moz-transition: border-color 250ms,box-shadow 250ms;
    transition: border-color 250ms,box-shadow 250ms;
    -webkit-appearance: none;
    -moz-appearance: textfield;
}

#searchButton, #mw-searchButton {
    background-color: transparent;
    position: absolute;
    top: 1px;
    bottom: 1px;
    right: 1px;
    min-width: 28px;
    width: 2.15384615em;
    margin: 0;
    border: 0;
    padding: 0;
    cursor: pointer;
    /** font-size: 0.8125em; was 13px so 1em was 16px == 12 pt!
     * but for now I stick to absolute font-sizes:
     * 13px * 3/4 = 9.75pt
     */
    --font-size: 9.75;
    direction: ltr;
    text-indent: -99999px;
    white-space: nowrap;
    overflow: hidden;
    z-index: 1;
}





.mw-indicators {
    float: right;
    z-index: 1;
}
.mw-body-content {
    position: relative;
    z-index: 0;
}
.mw-body-content {
    font-size: 0.875em;
    font-size: calc(1em * 0.875);
    line-height: 1.6;
}
.mw-body .mw-indicators {
    font-size: 0.875em;
    line-height: 1.6;
    position: relative;
}
.mw-body .mw-indicators {
    padding-top: 0.4em;
}


.vector-menu-portal h3 {
    display: block;

    background-image: url(/w/skins/Vector/resources/skins.vector.styles/images/portal-separator.png?4ab04);
    background-image: linear-gradient(to right,rgba(200,204,209,0) 0,#c8ccd1 33%,#c8ccd1 66%,rgba(200,204,209,0) 100%);
    background-position: center bottom;
    background-repeat: no-repeat;
    background-size: 100% 1px;

    color: #54595d;
    margin: 0.5em 0 0 0.66666667em;
    border: 0;
    padding: 0.25em 0;
    cursor: default;
}

.mw-editsection, .mw-editsection-like {
    margin-left: 1em;
    vertical-align: baseline;
}

/* hidden for now, complex stuff, SEO/Screenreader content */
.navbox, .printfooter, .mw-hidden-catlinks, .mw-normal-catlinks {
    display: none;
}

.mw-footer {
    padding: 1.25em;
}
.mw-footer ul {
    list-style: none none;
    margin: 0;
    padding: 0;
}
#footer-places li {
    float: left;
    margin-right: 1em;
    line-height: 2;
}
#footer-icons {
    float: right;
}
#footer-icons li {
    float: left;
    margin-left: 0.5em;
    line-height: 2;
    text-align: right;
}

div.hatnote {
    padding-left: 1.6em;
}

#contentSub, #contentSub2 {
    margin: 0 0 1.4em 1em;
    width: auto;
}

#contentSub2:empty {
    display: none;
}

element {

}

.mw-jump-link:not(:focus) {
    display: block;
    position: absolute !important;
    clip: rect(1px,1px,1px,1px);
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    overflow: hidden;

}

.mw-body h1, .mw-body-content h1, .mw-body-content h2 {
    margin-bottom: 0.25em;
    padding: 0;
}

h1, h2, h3, h4, h5, h6 {
    margin: 0;
    padding: 0;
}

h2, h3, h4, h5, h6 {
    margin-block-start: calc(1pt * var(--x-line-height) * var(--default-font-size));
}


.mw-body .firstHeading {
    overflow: visible;
}

h1, h2 {
    border-bottom: 1px solid #a2a9b1;
}

#p-logo + .mw-portlet h3 {
    display: none;
}

/* widgets */

.container-toggle-user_settings:not(#page_portal-testbed *){
    z-index: 999;
    /* FIXME: on Firefox the filter property on :root makes
     * "position: fixed" effectively into "position: absolute"
     */
    position: sticky;
    left: 0;
    top: 0;
}


button.toggle-user_settings:not(#page_portal-testbed *) {
    position: absolute;
}
button.toggle-user_settings {
    border: 1px solid lightgray;
    background: #ffffff82;
    border-radius: .25em;
}

.widgets_container {
    max-width: 27rem;
    border: 1px solid black;
    background: #fffffff4;
    padding: .5em 1em;
    margin: 1em;
    border-radius: 0.4em;
    box-shadow: -2px 2px 10px black;
}

.page_content-item .widgets_container{
    z-index: 998;
    position: absolute;
}

.widgets_container > * {
    margin: .5em 0;
    display: block;
}
.widgets_container label {
    margin-bottom: .3em;
    display: inline-block;
}

.widgets_container button.close{
    margin-left: auto;
    --font-weight: 600;
}

.widgets_container legend{
    font-family: AmstelVar;
    --font-weight: 600;
}

.widgets_container h3 {
    font-family: AmstelVar;
    margin: .5em 0;
    --font-weight: 500;
}

label.user_preferences-fine_user_zoom::after {
    content: attr(data-value) 'pt';
}

.widgets_container label.portal_augmentation-justification_option{
    display: block;
    margin-left: 1.5em;
}

label.user_preferences-user_distance::after {
    content: attr(data-value) 'cm';
}

.widgets_container input[type="range"] {
    vertical-align: middle;
    width: 9em;
}

.page_content-item {

}

#page_portal-testbed,
:fullscreen::backdrop {
    background: darkgrey;
    --background: darkgrey;
}

.page_portal-testbed body{
    background: none;
}

.testbed-subject_container {

}

.page_portal-testbed .widgets_container{
    margin: 1em;
}
#testbed-subject {
    width: 1024px;
    height: 768px;
    display: block;
    margin: auto;
}

.portal_properties-set_orientation{
  visibility: hidden;
  position: absolute;
  cursor: pointer;
}

.portal_properties-set_orientation ~ span:after {
  content: " Landscape";
}

.portal_properties-set_orientation ~ span:before {
  display: inline-block;
  content: " ";
  background: lightgrey;
  border: 1px solid black;
  border-radius: .1em;
  vertical-align:middle;
  width: 1em;
  height: .5em;
}

.portal_properties-set_orientation:checked ~ span:after {
  content: " Portrait";
}
.portal_properties-set_orientation:checked ~ span:before {
  width: .5em;
  height: 1em;
}


.portal_augmentation-run_justification_checkbox > input,
.portal_augmentation-switch_grade_checkbox > input{
    visibility: hidden;
    position: absolute;
    cursor: pointer;
}

.portal_augmentation-run_justification_checkbox > input ~ span:after,
.portal_augmentation-switch_grade_checkbox > input ~ span:after {
    display: inline-block;
    background: #f5f4f3;
    border: 0.0625em solid #edebe9;
    border: 0.0625em outset ThreeDLightShadow;
    padding: 0.4em;
    border-radius: .2em;
}

.portal_augmentation-run_justification_checkbox > input ~ span:hover:after,
.portal_augmentation-switch_grade_checkbox > input ~ span:hover:after {
    background: #f9f8f7;
}

.portal_augmentation-switch_grade_checkbox > input ~ span:before {
  content: "is off ";
}

.portal_augmentation-switch_grade_checkbox > input:checked ~ span:before {
  content: "is on ";
}

.portal_augmentation-switch_grade_checkbox > input ~ span:after {
  content: "turn on";
}

.portal_augmentation-switch_grade_checkbox > input:checked ~ span:after {
  content: "turn off";
}

label.portal_augmentation-amplify_grade::after {
    content: "×" attr(data-value);
}

.portal_augmentation-run_justification_checkbox > input ~ span:after{
    content: "▶ run";
}
.portal_augmentation-run_justification_checkbox > input:checked ~ span:after{
    content: "▮▮ pause";
}

/* use :root for custom properties
 * "*" destroys inheritance!
 *
 * We should set all necessary font-styles per element that defines
 * font-styles.
 * */
:root {
/* beginnings of the CSS framework */

/* I think the plan is to set high level variables, and depending
 * on the font **generate** css that uses them the best way.
 * So, a font/font-family can have  capabilities, we detect them, and
 * according to that, wire up these variables.
 */

/*
 * Uh, another thing is that not all of the standard properties below
 * do inherit. so we need to specify them explicitly for some elements!
 * e.g. columns, column-width, column-count (but column-width ismore or less
 * useless when column count is 1 anyways.)
 * width
 */


/* page/portal info */
/*--column-width: 32.5; /* in em */
/*--column-count: 1; /* maybe use actual container width to determine this? */


/* --font choice/variation settings*/
--font-family: AmstelVar;
--grad-animation-name: AmstelVar-grad-by-font-size;

--font-style: normal; /* oblique is basically broken */
--font-slant: 0;
--font-weight: 400; /* depending on font/font-family this can go anywhere */
--font-grade: 0;
/* used to be 520 but making it narrow to work out justification */
/* interestingly, vabro.js suggests to sart at 375 and to max out at 402
 * was 440 and I thought it was tight.
 *  */
--font-stretch: 375;/* by (xtra, wdth) */
/* so far only experimental used in OLD_justifyLine*/
--font-stretch-change: 0;

--font-width: 100; /* this goes into wdth */

/* in pt! We need JS to get the document default font-size in pt,
 * because we can't yet calculate it
 * https://github.com/w3c/csswg-drafts/issues/6149
 */
 /* Must be invalid initially or it will influence the javascript-determined value.*/
--default-font-size: "invalid";
--font-size: var(--default-font-size); /* --opsz */

--font-size-change-by-distance: calc(var(--user-distance-cm, 0) / 25);

/* FIXME: depending on line-length these should change
 * with runion-01 we have always shorter lines, hence these are not of use
 * anymore:
 *       --line-height: 1.5;
 *       --letter-space: 0.1;
 *       --word-space: 0.1;/*in fractions of em
 * HOWEVER, in a long-line situation, the tool should do something like
 * the above, and also the below is likely too static.
 */
--line-height: 1.3;
--letter-space: 0;
--word-space: 0;/*in fractions of em*/


}

/**
columns /* caution: e.g. firefox has bad support for break-after * /
 orphans
widows
**/

*{
/*column-width: calc(1pt * var(--x-font-size) * var(--column-width));
/*column-count: var(--column-count);*/
/*width: calc(1em * var(--column-width));*/
font-family: var(--font-family);
font-style: var(--font-style);
font-size: calc(1pt * var(--x-font-size));
letter-spacing: calc(1pt * var(--letter-space));
line-height: var(--x-line-height);
word-spacing: calc(1em * var(--word-space));
/* This case is better set on each element, seems to be calculated in the
 * wrong place otherwise. I.e. not using the --font-size from sub{--font-size: 8;}
 * but from :root{--font-size: 12;}
 */
--x-font-size: calc(var(--font-size) + var(--fine-user-zoom, 0) + var(--font-size-change-by-distance, 0));
/* FIXME: not sure if the distance change should be implemented here!
 * actually, the runion takes care of --line-height, so it should do this
 * as well.
 * I wonder if the following meant that for some distances we want to
 * have line-space bigger than 1.2 but never smaller than, or if it
 * was a mix up between min and max, and min was meant.
 * --x-line-height: max(1.2, calc(var(--line-height) + (-1 * var(--font-size-change-by-distance, 0) * 0.05)));
 */
--x-line-height: max(1, min(1.2, calc(var(--line-height) + (-1 * var(--font-size-change-by-distance, 0) * 0.05))));
--x-font-grade: calc(var(--font-grade, 0) * var(--amplify-grade, 1) * var(--toggle-grade, 1));


--x-font-stretch: calc(var(--font-stretch) + var(--font-stretch-change, 0));

--x-font-weight: calc(var(--font-weight) + var(--font-weight-change, 0));

font-weight: var(--x-font-weight);

font-variation-settings:
            "slnt" var(--font-slant),
            "wght" var(--x-font-weight),
            "GRAD" var(--x-font-grade),
            "XTRA" var(--x-font-stretch),
            "opsz" var(--x-font-size),
            "wdth" var(--font-width)
            ;
/* This is not required for the variable fonts, as font-variation-settings
 * will win, however, it helps with the type-ramp bookmarklet to
 * eliminate false doubles and it does not do any harm.
 */
font-weight: var(--x-font-weight);

}


/* All about line raster/grid consistency across columns. */
/* no longer for p, ul, as we use text-indent and ul has it's own indent style.*/

table,
.thumb,
ul, ol.not(:first-child),
.templatequote{
    /* likely not what we're going to use, but it aligns with the line height. */
    margin-block-start: calc(1pt * var(--x-font-size) * var(--x-line-height));
}
.runion-01 .hatnote,
table,
.thumb,
ul, ol,
.templatequote {
    margin-block-end: calc(1pt * var(--x-font-size) * var(--x-line-height));
}

p, ul ul{
    margin-block: 0;
}

h2 + p,
h3 + p {
    margin-block-start: 0;
}

table{
    border-spacing: 0;
}

b, strong {
  --font-weight: 700;
}

/* LIGHT/DARK MODE CHOLOR-SCHEME */

:root {
    /* Only in dark mode, but it depends on font-size and weight
     * where font-size selects 2 optically chosen grade adjustments
     * for weights between 400 and 700 and those must be interpolated
     * by the actual weight value.
     *
     * The values by font size could also be interpolated, but since
     * they are 1pt apart, they could also be chosen by to integer
     * rounded font-size, between 10 and 18.
     *
     * Also, doing a grep on this document, we only use --font-weight 400, 600, 700
     * so, in our case interpolating is not necessary and just looking up
     * values by font-size would suffice. Note though, that looking up values
     * is the hard part.
     *
     * Maybe a lookup table could be created using @keyframes>???
     * one dimension is chosen by the animation name
     * one dimension is chosen by the animation position
     * since the font-size is has optically/arbitrary selected values,
     * it should probably be the animation name, BUT, for it's the less
     * controlled value, it may better be the position! ....
     *
     * maybe the custom properties set by the keyframes do not interpolate
     * but with enough keyframes, it could be good enough!
     */

    --light-background: #fff;
    --light-color: #000;

    --light-mode-invert: 0;
    --dark-mode-invert: 1;

    --dark-link-color: #6f5608;
    --dark-layout-border-color: #a06b27;

    /* default */
    --background: var(--light-background);
    --color: var(--light-color);
    --mode-invert: var(--light-mode-invert);
}

/* At least for debugging, these help immensely as the properties show
 * up calc()-ulated! in the developer tools of Chromium under computed
 * values! But foremost, @properties make the animations interpolate.
 */

@property --grad-400 {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --grad-700 {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

/* For testing in the Javasscript fallback.*/
@property --grad-supported {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

@property --grad-animation-progression {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --font-grade {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

/* Works together with the @properties nicely in Chromium, but Firefox
 * support is not soon to expect. A solution seems to be to set
 * --grad-400 and --grad-700 by hand/directly in CSS, whenever --font-size,
 * --font-family, or --font-weight is set, but it wouldn't take into
 * account the final absolute --x-font-size, which makes it rather unusable.
 * So probably JavaScript has to walk through all elements and set those
 * --grad-X00 variables where one of the three input variables changes
 * compared to  the parent.
 * I keep this though, because it's impressive what can be done with the
 * new CSS stuff and it's a good actual working example. Javascript will
 * be a fallback, need to feature detect.
 */
@keyframes RobotoFlex-grad-by-font-size {
    /* From 10 to 18 and a step size of 1 we have 8 steps: 12.5 % each.*/
    0% { /* 10 pt*/
      --grad-supported: 1;
      --grad-400: 0;
      --grad-700: 0;
    }
    12.5% { /* 11 pt*/
      --grad-400: -6;
      --grad-700: -6;
    }
    25% { /* 12 pt*/
      --grad-400: -9;
      --grad-700: -10;
    }
    37.5% { /* 13 pt*/
      --grad-400: -12;
      --grad-700: -15;
    }
    50% { /* 14 pt*/
      --grad-400: -14;
      --grad-700: -20;
    }
    62.5% { /* 15 pt*/
      --grad-400: -16;
      --grad-700: -30;
    }
    75% { /* 16 pt*/
      --grad-400: -18;
      --grad-700: -38;
    }
    87.5% { /* 17 pt*/
      --grad-400: -22;
      --grad-700: -43;
    }
    100% { /*18 ot */
      --grad-supported: 1;
      --grad-400: -24;
      --grad-700: -54;
    }
}
@keyframes AmstelVar-grad-by-font-size {
    /* From 10 to 18 and a step size of 1 we have 8 steps: 12.5 % each.*/
    0% { /* 10 pt*/
      --grad-supported: 1;
      --grad-400: -3;
      --grad-700: -80;
    }
    12.5% { /* 11 pt*/
      --grad-400: -6;
      --grad-700: -90;
    }
    25% { /* 12 pt*/
      --grad-400: -10;
      --grad-700: -95;
    }
    37.5% { /* 13 pt*/
      --grad-400: -12;
      --grad-700: -100;
    }
    50% { /* 14 pt*/
      --grad-400: -14;
      --grad-700: -105;
    }
    62.5% { /* 15 pt*/
      --grad-400: -16;
      --grad-700: -110;
    }
    75% { /* 16 pt*/
      --grad-400: -18;
      --grad-700: -115;
    }
    87.5% { /* 17 pt*/
      --grad-400: -22;
      --grad-700: -120;
    }
    100% { /*18 ot */
      --grad-supported: 1;
      --grad-400: -24;
      --grad-700: -125;
    }
}

/* This is a placeholder to switch on/off existing animation
 * using custom properties in animation-name.
 */
@keyframes no-animation {}

/* Font-Grade/GRAD setting
 *
 * Use this to turn all of this on, see dark-mode settings:
 *          --grad-active-animation: var(--grad-animation-name);
 *
 * It's a pity we can't synthesize the animation name, as in `content` e.g.:
 *      animation-name: var(--font-family) "-grad-by-font-size";
 *      OR
 *      --grad-animation-name: var(--font-family) "-grad-by-font-size";
 * Which is a bummer, because it basically means we must set
 * animation-name next to --font-family everywhere.
 */
* {
    /* (undefined) will tell us in the fallback javascript that
     * the @keyframes are not supported.
     *     --grad-400: (undefined);
     *     --grad-700: (undefined);
     * NOTE: can't use this as in Firefox, without @property, it breaks
     * all of the font-variation-settings. Instead we'll just check:
     * if(getComputedStyle(elem).getPropertyValue('--grad-400') === '') ...;
     */

    animation-play-state: paused;
    animation-fill-mode: both;
    animation-timing-function: linear;
    /* depends on font-size:
     *      10 and lower than = 0
     *      18 and greater than = 1
     */
    --grad-min-font-size: 10;
    --grad-max-font-size: 18;
    --grad-actual-font-size: clamp(
            var(--grad-min-font-size),
            var(--x-font-size),
            var(--grad-max-font-size)
            );
    --grad-animation-progression: calc(
              (var(--grad-actual-font-size) - var(--grad-min-font-size))
            / (var(--grad-max-font-size) - var(--grad-min-font-size))
            );
    animation-duration: 1s;
    animation-delay: calc(-1s * var(--grad-animation-progression));
    --grad-active-animation: no-animation;
    animation-name: var(--grad-active-animation);
    /* --font-grade:
     * Must be only applied in dark mode!
     * There's no other grade changing rule, however, this property
     * is already set so that it only switches on in dark mode
     */
    --font-grade: calc(
              (var(--grad-700, 0) - var(--grad-400, 0))
            * ( (clamp(400, var(--x-font-weight), 700) - 400) / (700 - 400))
            + var(--grad-400, 0)
            );
}


@media (prefers-color-scheme: dark) {
    :root{
        /* This is actually the inverted color of what we really want:
         * a nice light sky blue (according to the color-picker: #7b91d4)
         * */
        --link-color: var(--dark-link-color);
        --layout-border-color: var(--dark-layout-border-color);
        --mode-invert: var(--dark-mode-invert);
    }
    * {
        --grad-active-animation: var(--grad-animation-name);
    }
    .user_preferences-color_scheme-default:after{
        content: " (dark)";
    }
}
:root.explicit-dark-mode{
    --link-color: var(--dark-link-color);
    --layout-border-color: var(--dark-layout-border-color);
    --mode-invert: var(--dark-mode-invert);
}
.explicit-dark-mode * {
    --grad-active-animation: var(--grad-animation-name);
}

@media (prefers-color-scheme: light){
    :root{
        --background: var(--light-background);
        --color: var(--light-color);
        --mode-invert: var(--light-mode-invert);
    }
    .user_preferences-color_scheme-default:after{
        content: " (light)";
    }
}

:root.explicit-light-mode{
    --background: var(--light-background);
    --color: var(--light-color);
    --mode-invert: var(--light-mode-invert);
}

:root{
    background: var(--background);
    color: var(--color);
    filter: invert(var(--mode-invert, 0))
}
img {
    /* Invert back; this is quite elegant! */
    filter: invert(var(--mode-invert, 0))
}

/* Attempts to use the framework to reproduce the original font-settings. */
#mw-head,
#mw-panel {
    --font-family: RobotoFlex;
    --grad-animation-name: RobotoFlex-grad-by-font-size;
    --font-stretch: 400;
}
.vector-menu-portal .body li, .vector-menu-portal .vector-menu-content li {
    --font-size:  calc(3/4 * var(--default-font-size));
    --line-height: 1.125;
    word-wrap: break-word;
}

h1, h2 {
    --font-family: RobotoFlex;
    --grad-animation-name: RobotoFlex-grad-by-font-size;
    --font-stretch: 400;
}
h1 {
    --font-size: calc(9/5 * var(--default-font-size));
    --font-weight: 600;
}
h2 {
    --font-size: calc(3/2 * var(--default-font-size));
    --font-weight: 400;
}

.mw-body-content h3, .mw-body-content h4 {
    --font-family: AmstelVar;
    --grad-animation-name: AmstelVar-grad-by-font-size;
    --font-stretch: 400;
    --font-size: calc(6/5 * var(--default-font-size));
    --font-weight: 600;
}

.vector-menu-portal h3 {
    --font-family: RobotoFlex;
    --grad-animation-name: RobotoFlex-grad-by-font-size;
    --font-size: calc(3/4 * var(--default-font-size));
    --font-weight: 400;
}

.mw-editsection, .mw-editsection-like {
    --font-size: calc(13/16 * var(--default-font-size));
    --font-weight: 400;
    --line-height: 1;
}

@property --sup-scale {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
/* get font size and
 *
 * * .57 scale size for 14 pt
 * for 8 pt = .65,
 * for 144 pt. .25
 */
@keyframes synth-sub-and-super-script {
    0% { /* 8pt */
        --sup-scale: .65
    }
    4.41% { /*   14pt  (14-8)/(144-8) * 100  */
        --sup-scale: .57;
    }
    100% { /* 144pt */
        --sup-scale: .25;
    }
}

sup, sub{
    /*This is a copy of the original --x-font-size, will always have
     * to follow the original. */
    --xo-font-size: calc(var(--font-size) + var(--fine-user-zoom, 0) + var(--font-size-change-by-distance, 0));
    /* the redefines --x-font-size, with our scaling factor that way,
     * it goes directly into OPSZ etc., without us changing the definitions
     */
    --no-animation: no-animation;
    animation-name: synth-sub-and-super-script, var(--grad-active-animation);
    animation-play-state: paused, paused;
    animation-fill-mode: both, both;
    animation-timing-function: linear, linear;
    /* depends on font-size:
     *      10 and lower than = 0
     *      18 and greater than = 1
     */
    --sup-min-base-font-size: 8;
    --sup-max-base-font-size: 144;
    --sup-actual-base-font-size: clamp(
            var(--sup-min-base-font-size),
            var(--xo-font-size),
            var(--sup-max-base-font-size)
            );
    --sup-animation-progression: calc(
              (var(--sup-actual-base-font-size) - var(--sup-min-base-font-size))
            / (var(--sup-max-base-font-size) - var(--sup-min-base-font-size))
            );
    animation-duration: 1s, 1s;
    animation-delay: calc(-1s * var(--sup-animation-progression)),
                     calc(-1s * var(--grad-animation-progression));
    ;
    --x-font-size: calc(var(--xo-font-size) * var(--sup-scale));


    /* If there’s a width axis, increase it to 110%,
     * or * 1.1 if wdth is a non-standard value.
     *          FIXME: In which case would it be a non-standard value?
     *          FIXME: In here, we use rather XTRA for width, is it that?
     */
    --font-width: 110; /* The registered axis default is 100 */

    /* If there’s a wght axis, increase it by 50,
     * or * 1.125 if wght is a non-standard value
     *          FIXME: In which case would it be a non-standard value?
     */
    --font-weight-change: calc(var(--font-weight) * 0.125);
}

sup *, sub *{
    font-size: inherit;
    --x-font-size: inherit;
}

sup, sup * {
    /*baseline shift = cap ht * .57 - cap ht
     *      FIXME: since I can't access cap-height directly I go with
     *             standard vertical-align: top, which doesn't interfere
     *             with the line-height as well, e.g. the value "super"
     *             does!
     */
    vertical-align: top;
}
sub, sub * {
    /* Else footnote inferiors
     * baseline shift = cap ht / 6
     *      FIXME: same considerations as above with <sup> + baseline shift
     */
    vertical-align: bottom;
}


#p-personal li {
    --font-size:  calc(3/4 * var(--default-font-size));
}

b, strong {
    --font-weight: 600;
}

i, cite, em, var, dfn {
    --font-style: italic;
}

.hatnote {
    --font-style: italic;
}
.mw-body h1, .mw-body-content h1, .mw-body-content h2 {
    /* Positioning the headline underline (border-bottom) closely to the box.
     * Too this from original markup, I'm not sure this is the best way.*/
    --line-height:1.3;
}


.runion-01 {
    /*
    --column-count: columns;
    --column-width-en: lineLengthEn;
    --column-gap-en: columnGapEn;
    --padding-left-en: paddingLeftEn;
    --padding-right-en: paddingRightEn;
    */

    columns: calc(.5em * var(--column-width-en, 0)) var(--column-count, 1);
    padding-left: calc(.5em * var(--padding-left-en, 0));
    padding-right: calc(.5em * var(--padding-right-en, 0));
    column-gap: calc(.5em * var(--column-gap-en, 0));

    /* FIXME/TODO: what about H&J, especially in Chrome and Safari?
     * ALSO: how to detect and change the setup when hyphens are not available?
     *
     * As of now confirmed working with the current testing page as it is,
     * in English:
     *      Firefox for openSuse - Tumbleweed Version 86.0.1 (64-bit)
     *      Chromium Version 89.0.4389.90 (openSUSE Build) (64-bit)
     *
     * https://css-tricks.com/almanac/properties/h/hyphenate/
     *
     * There are it seem related properties to configure hyphenation
     * hyphenate-limit-last, hyphenate-limit-zone etc.
     * Safari 5+ requires -webkit-, Firefox 6+ requires -moz-, IE 10+ requires -ms-, iOS 4.2+ requires -webkit-.
     */
    word-wrap: break-word;
    overflow-wrap: break-word;
    -webkit-hyphens: auto;
      -moz-hyphens: auto;
      -ms-hyphens: auto;
           hyphens: auto;

    text-align: left;
    /* FIXME: should vary with line-length etc. */
    text-indent: 2em;
    /* text-align: justify;
     * We're doing the justification ourselves, initially, left-aligned
     * is required, because we can use it to measure the empty space that
     * is left on the line.
     */
    /*text-justify: inter-word;   auto is OK so far as well*/

    /* Firefox does not support these! */
    orphans: 3;
    widows: 3;
}

/* no text-indent*/

.runion-01 .hatnote,
.runion-01 ul,
.runion-01 ol,
.runion-01 h1,
.runion-01 h2,
.runion-01 h3{
    text-indent: 0;
}

/* FIXME .hatnote may have margin-block, but should
 * not indent, it's already italic anyways.
 * */

.runion-01 .hatnote{
    padding-inline-start: 0;
    /* because it's usually really short */
    hyphens: none;
}


.runion-01.runion-activated {
    white-space: nowrap;
}

/* FIXME: Apply the class .fix-short-section automatically, it's
 * currently set manually on the <p> of the sub-section "Etymology".
 */
.runion-01.runion-activated .fix-short-section {
    column-span: all;
    width: calc(.5em * var(--column-width-en, 0));
}

/* these are sectioning elements */
.runion-01 h1,
.runion-01 h2,
.runion-01 h3 {
    column-span: all;
}

.runion-01 div.tright,
.runion-01 div.tleft {
    float:none;
    margin-left:0;
    margin-right: 0;
    /* FIXME: this stuff distracts from the column layout, needs resolution.
    display: none;*/
}


/* Control line-wrapping.
 *
 * Chrome cannot do it's hyphenation between two spans, so after
 * wrapping the text-nodes into the .runion-line spans, line breaking
 * changes.
 * Firefox keeps the same layout without any trouble, but, since we plan
 * to change the font-spec for each line to fit better, this must be a
 * bomb-proof way to ensure each line stays where it is.
 */
.runion-line {
    /* This is forcing the browser.*/
    white-space: nowrap;
    /* This is the cool when we toggle the color-coded-lines class*/
    transition: background 3s;
}

.color-coded-lines .runion-line{
    /* with small line-heights and color coded line backgrounds, we
     * tend to clip descenders.
     * FXME: must be removed when no line color coding is desired,
     * especially Chromium has little rendering errors in column layout
     * here.
     */
    mix-blend-mode: darken;
    background: var(--line-color-code, bisque);
    transition: background .5s;
}


.skip-justify {
    white-space: normal;
}



/**
 * Introduce explicit wrapping before each line
 * This normalizes the behavior of Chrome and Firefox, both loose
 * their hyphenation with the first line ::before display: block rule
 * now, we need to mark elements in JS explicitly that require hyphens!.
*/
.runion-line.r00-l-first::before{
    content: '';
    display: block;
}

.runion-line.r00-first-line.r00-l-first::before
{
    content: unset;
    display: unset;
}

/*
 * This fixes line wrapping, not changing in Chrome (nor Firefox). This
 * has the advantage, that the last-line in a paragraph is aligned left
 * and the other lines are justified by word-space, exactly what we are
 * looking for.
 * The heuristic that the adds the hyphen class may still have flaws!
 */
.runion-line.r00-l-hyphen::after {
    content: '-'; /* I tried using soft hyphen &shy; '\00AD' but it
                     doesn't do anything*/
}


